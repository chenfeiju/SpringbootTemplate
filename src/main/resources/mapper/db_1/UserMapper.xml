<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.chenfj.mapper.UserMapper">
	<!--开启本mapper的namespace下的二级缓存-->
	<!--
        eviction:代表的是缓存回收策略，目前MyBatis提供以下策略。
        (1) LRU,最近最少使用的，一处最长时间不用的对象
        (2) FIFO,先进先出，按对象进入缓存的顺序来移除他们
        (3) SOFT,软引用，移除基于垃圾回收器状态和软引用规则的对象
        (4) WEAK,弱引用，更积极的移除基于垃圾收集器状态和弱引用规则的对象。这里采用的是LRU，
                移除最长时间不用的对形象

        flushInterval:刷新间隔时间，单位为毫秒，这里配置的是100秒刷新，如果你不配置它，那么当
        SQL被执行的时候才会去刷新缓存。

        size:引用数目，一个正整数，代表缓存最多可以存储多少个对象，不宜设置过大。设置过大会导致内存溢出。
        这里配置的是1024个对象

        readOnly:只读，意味着缓存数据只能读取而不能修改，这样设置的好处是我们可以快速读取缓存，缺点是我们没有
        办法修改缓存，他的默认值是false，不允许我们修改
-->
	<!--<cache eviction="LRU" flushInterval="100000" readOnly="true" size="1024"/>-->

	<!-- redis二级缓存
	<cache type="org.mybatis.caches.redis.RedisCache" /> -->

	<!-- 为了返回List，类型而定义的resultMap -->
	<resultMap id="resultListUser" type="user" >
		<id column="id" property="id" />
		<!-- 使用自定义处理器 -->
		<result column="user_name" property="userName" />
		<result column="sex" property="sex" />
		<result column="address" property="address" />
		<result column="age" property="age" />
		<result column="password" property="password"/>
	</resultMap>

	<!-- 插件分页 -->
	<!-- 可以通过设置useCache来规定这个sql是否开启缓存，ture是开启，false是关闭 -->
	<!--<select id="selectUsersByPage" parameterType="map" resultMap="resultListUser" useCache="false">
		select * from user
	</select>-->

	<!-- 根据id查询 -->
	<select id="selectUserById" parameterType="user" resultMap="resultListUser">
		select * from user where id = #{id}
	</select>
	<!-- 根据id查询 -->
	<select id="selectUserByUsername" parameterType="user" resultMap="resultListUser">
		select * from user where user_name = #{userName}
	</select>

	<select id="selectUserByPage" resultMap="resultListUser">
		select * from user
	</select>

	<update id="updateUserName" parameterType="user">
		update user set user_name = #{userName} where id = #{id}
	</update>


	<!-- 修改 -->
	<!--<update id="updateUser" parameterType="com.study.mybatis.entity.User">
		UPDATE user
		<trim prefix="set" suffixOverrides=",">
			<if test="userName!=null">userName=#{userName},</if>
			<if test="sex!=null">sex=#{sex},</if>
			<if test="userAddress!=null">userAddress=#{userAddress},</if>
			<if test="userAge!=null">userAge=#{userAge},</if>
		</trim>
		WHERE id=#{id}
	</update>-->


	<!-- 其他分页方式？ -->

	<!-- 借助数组进行分页 -->
	<!--<select id="selectUsersByArray" resultMap="resultListUser">
		select * from user
	</select>-->
	<!-- 借助Sql语句进行分页 -->
	<!--<select id="selectUsersBySql" parameterType="map" resultMap="resultListUser">
		select * from user limit #{pageNo} , #{pageSize}
	</select>-->
	<!-- RowBounds实现分页 -->
	<!--<select id="selectUsersByRowBounds" resultMap="resultListUser">
		select * from user 
	</select>-->

</mapper>